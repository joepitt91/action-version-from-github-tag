# SPDX-FileCopyrightText: 2025 Joe Pitt
#
# SPDX-License-Identifier: GPL-3.0-only

---
name: Get Latest Version from GitHub Tags
author: Joe Pitt
description: Get the latest version from the tags in a GitHub repository.
inputs:
  token:
    description: The token to authenticate to GitHub with.
    required: true
  owner:
    description: The owner of the source repository.
    required: true
  repository:
    description: The name of the source repository.
    required: true
  minimum_version:
    description: The minimum version number to accept, e.g. 2.0.0. Defaults to None.
    required: false
  maximum_version:
    description: The maximum version number to accept, e.g. 2.99.99. Defaults to None.
    required: false
outputs:
  tag:
    description: The tag for the latest version.
    value: ${{ steps.get_version.outputs.release }}
  version:
    description: The latest version number.
    value: ${{ steps.get_version.outputs.version }}
runs:
  using: composite
  steps:
  - name: Install Dependencies
    id: dependencies
    run: pip install --quiet --upgrade -r ${{ github.action_path }}/requirements.txt
    shell: bash
  - name: Get Latest Version
    id: get_version
    env:
      GITHUB_ACTION_PATH: ${{ github.action_path }}
      INPUT_maximum_version: ${{ inputs.minimum_version }}
      INPUT_minimum_version: ${{ inputs.minimum_version }}
      INPUT_owner: ${{ inputs.owner }}
      INPUT_repository: ${{ inputs.repository }}
      INPUT_token: ${{ inputs.token }}
    shell: python
    run: |
      from os import getenv
      from get_latest_version.github import get_latest_version_from_tags
      from get_latest_version.functions import clean_version
      from semver import Version

      minimum_version = None
      if getenv("INPUT_minimum_version") is not None and len(getenv("INPUT_minimum_version")) >= 5:
          minimum_version = Version.parse(getenv("INPUT_minimum_version"))
      maximum_version = None
      if getenv("INPUT_maximum_version") is not None and len(getenv("INPUT_maximum_version")) >= 5:
          maximum_version = Version.parse(getenv("INPUT_maximum_version"))

      tag = get_latest_version_from_tags(
          token=getenv("INPUT_token"),
          owner=getenv("INPUT_owner"),
          repository=getenv("INPUT_repository"),
          minimum_version=minimum_version,
          maximum_version=maximum_version,
      )

      with open(getenv("GITHUB_OUTPUT"), "a", encoding="utf-8") as f:
          f.write(f"tag={tag}\n")
          f.write(f"version={Version.parse(clean_version(tag))}\n")
  - name: Print Version
    id: print
    run: |
      echo "Latest version (${{ steps.get_version.outputs.version }}) of ${{ inputs.owner }}/${{ inputs.repository }} is in tag ${{ steps.get_version.outputs.tag }}"
    shell: bash
branding:
  color: blue
  icon: disc